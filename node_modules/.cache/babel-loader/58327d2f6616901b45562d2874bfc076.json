{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ranjith_biswas\\\\Desktop\\\\CL_tasks\\\\cl_task\\\\src\\\\components\\\\Markdown.js\";\nimport * as React from \"react\";\nimport ReactMde from \"react-mde\";\nimport ReactDOM from \"react-dom\";\nimport * as Showdown from \"showdown\";\nimport \"./styles.css\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nfunction loadSuggestions(text) {\n  return new Promise((accept, reject) => {\n    setTimeout(() => {\n      const suggestions = [{\n        preview: \"Andre\",\n        value: \"@andre\"\n      }, {\n        preview: \"Angela\",\n        value: \"@angela\"\n      }, {\n        preview: \"David\",\n        value: \"@david\"\n      }, {\n        preview: \"Louise\",\n        value: \"@louise\"\n      }].filter(i => i.preview.toLowerCase().includes(text.toLowerCase()));\n      accept(suggestions);\n    }, 250);\n  });\n}\n\nconst converter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true\n});\nexport default function Markdown() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  const [selectedTab, setSelectedTab] = React.useState(\"write\");\n  return React.createElement(ReactMde, {\n    value: value,\n    onChange: setValue,\n    selectedTab: selectedTab,\n    onTabChange: setSelectedTab,\n    generateMarkdownPreview: markdown => Promise.resolve(converter.makeHtml(markdown)),\n    loadSuggestions: loadSuggestions,\n    childProps: {\n      writeButton: {\n        tabIndex: -1\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["C:/Users/ranjith_biswas/Desktop/CL_tasks/cl_task/src/components/Markdown.js"],"names":["React","ReactMde","ReactDOM","Showdown","loadSuggestions","text","Promise","accept","reject","setTimeout","suggestions","preview","value","filter","i","toLowerCase","includes","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","Markdown","setValue","useState","selectedTab","setSelectedTab","markdown","resolve","makeHtml","writeButton","tabIndex"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,cAAP;AACA,OAAO,4CAAP;;AAEA,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,SAAO,IAAIC,OAAJ,CAAY,CAACC,MAAD,EAASC,MAAT,KAAoB;AACrCC,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMC,WAAW,GAAG,CAClB;AACEC,QAAAA,OAAO,EAAE,OADX;AAEEC,QAAAA,KAAK,EAAE;AAFT,OADkB,EAKlB;AACED,QAAAA,OAAO,EAAE,QADX;AAEEC,QAAAA,KAAK,EAAE;AAFT,OALkB,EASlB;AACED,QAAAA,OAAO,EAAE,OADX;AAEEC,QAAAA,KAAK,EAAE;AAFT,OATkB,EAalB;AACED,QAAAA,OAAO,EAAE,QADX;AAEEC,QAAAA,KAAK,EAAE;AAFT,OAbkB,EAiBlBC,MAjBkB,CAiBXC,CAAC,IAAIA,CAAC,CAACH,OAAF,CAAUI,WAAV,GAAwBC,QAAxB,CAAiCX,IAAI,CAACU,WAAL,EAAjC,CAjBM,CAApB;AAkBAR,MAAAA,MAAM,CAACG,WAAD,CAAN;AACD,KApBS,EAoBP,GApBO,CAAV;AAqBD,GAtBM,CAAP;AAuBD;;AAED,MAAMO,SAAS,GAAG,IAAId,QAAQ,CAACe,SAAb,CAAuB;AACvCC,EAAAA,MAAM,EAAE,IAD+B;AAEvCC,EAAAA,kBAAkB,EAAE,IAFmB;AAGvCC,EAAAA,aAAa,EAAE,IAHwB;AAIvCC,EAAAA,SAAS,EAAE;AAJ4B,CAAvB,CAAlB;AAOA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAM,CAACX,KAAD,EAAQY,QAAR,IAAoBxB,KAAK,CAACyB,QAAN,CAAe,oBAAf,CAA1B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC3B,KAAK,CAACyB,QAAN,CAAe,OAAf,CAAtC;AAEA,SACI,oBAAC,QAAD;AACE,IAAA,KAAK,EAAEb,KADT;AAEE,IAAA,QAAQ,EAAEY,QAFZ;AAGE,IAAA,WAAW,EAAEE,WAHf;AAIE,IAAA,WAAW,EAAEC,cAJf;AAKE,IAAA,uBAAuB,EAAEC,QAAQ,IAC/BtB,OAAO,CAACuB,OAAR,CAAgBZ,SAAS,CAACa,QAAV,CAAmBF,QAAnB,CAAhB,CANJ;AAQE,IAAA,eAAe,EAAExB,eARnB;AASE,IAAA,UAAU,EAAE;AACV2B,MAAAA,WAAW,EAAE;AACXC,QAAAA,QAAQ,EAAE,CAAC;AADA;AADH,KATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAiBD","sourcesContent":["import * as React from \"react\";\r\nimport ReactMde from \"react-mde\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as Showdown from \"showdown\";\r\nimport \"./styles.css\";\r\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\r\n\r\nfunction loadSuggestions(text) {\r\n  return new Promise((accept, reject) => {\r\n    setTimeout(() => {\r\n      const suggestions = [\r\n        {\r\n          preview: \"Andre\",\r\n          value: \"@andre\"\r\n        },\r\n        {\r\n          preview: \"Angela\",\r\n          value: \"@angela\"\r\n        },\r\n        {\r\n          preview: \"David\",\r\n          value: \"@david\"\r\n        },\r\n        {\r\n          preview: \"Louise\",\r\n          value: \"@louise\"\r\n        }\r\n      ].filter(i => i.preview.toLowerCase().includes(text.toLowerCase()));\r\n      accept(suggestions);\r\n    }, 250);\r\n  });\r\n}\r\n\r\nconst converter = new Showdown.Converter({\r\n  tables: true,\r\n  simplifiedAutoLink: true,\r\n  strikethrough: true,\r\n  tasklists: true\r\n});\r\n\r\nexport default function Markdown() {\r\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\r\n  const [selectedTab, setSelectedTab] = React.useState(\"write\");\r\n\r\n  return (\r\n      <ReactMde\r\n        value={value}\r\n        onChange={setValue}\r\n        selectedTab={selectedTab}\r\n        onTabChange={setSelectedTab}\r\n        generateMarkdownPreview={markdown =>\r\n          Promise.resolve(converter.makeHtml(markdown))\r\n        }\r\n        loadSuggestions={loadSuggestions}\r\n        childProps={{\r\n          writeButton: {\r\n            tabIndex: -1\r\n          }\r\n        }}\r\n      />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}